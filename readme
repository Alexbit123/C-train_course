Задание
Не всегда ответ на запрос соответствует ожиданиям. Чем результат ближе к ожидаемому, тем выше его релевантность запросу. Релевантностью документа называют количество уникальных слов, которые пересекаются с запросом. Научите свою поисковую систему считать релевантность документа.
Релевантность нужно возвращать вместе с идентификатором документа как пару из двух целых чисел {document_id, relevance}. Иными словами, функция FindDocuments теперь должна выглядеть так:
vector<pair<int, int>> FindDocuments(const vector<pair<int, vector<string>>>& documents,
                                     const set<string>& stop_words,
                                     const string& query) {
} 
Сама структура базы данных тоже должна измениться. Теперь каждый документ надо представить не в виде vector<string>, а в виде pair<int, vector<string>>. Первый элемент пары хранит id документа, а второй — вектор его слов. Функция AddDocument также должна изменить сигнатуру:
void AddDocument(vector<pair<int, vector<string>>>& documents,
                 const set<string>& stop_words,
                 int document_id, 
                 const string& document) {
} 
Вспомогательная функция MatchDocument раньше сообщала, соответствует ли документ поисковому запросу. Теперь она должна изменить сигнатуру и будет возвращать релевантность документа:
int MatchDocument(const pair<int, vector<string>>& content, 
                  const set<string>& query_words) {
} 
Пример
Запрос	Документ	Релевантность
cheburashka with big ears	a strange animal with big ears is building a house for its friends	2
grey guinea pig	a small curly guinea pig with grey hair has been found	3
Пример использования функций
int main() {
    const string stop_words_joined = ReadLine();
    const set<string> stop_words = ParseStopWords(stop_words_joined);

    // Считываем документы
    vector<pair<int, vector<string>>> documents;
    const int document_count = ReadLineWithNumber();
    for (int document_id = 0; document_id < document_count; ++document_id) {
        AddDocument(documents, stop_words, document_id, ReadLine());
    }

    const string query = ReadLine();
    // Выводим результаты поиска по запросу query
    for (auto [document_id, relevance] : FindDocuments(documents, stop_words, query)) {
        cout << "{ document_id = "s << document_id << ", relevance = "s << relevance << " }"s
             << endl;
    }
} 
Формат ввода и вывода
В первой строке ввода содержатся стоп-слова, разделённые пробелами. Во второй строке указывается целое число N. Оно задаёт количество документов. В каждой из следующих N строк — текст документа, в котором слова разделяются одним пробелом. Последняя строка ввода содержит текст поискового запроса, где слова разделяются одним пробелом.
Программа должна вывести id документов и их релевантность поисковому запросу, как показано ниже. Результаты выводятся в порядке добавления документов в базу данных.
Пример ввода:
a an on the in is has been are with for from have be was
4
a small curly guinea pig with grey hair has been found
a young 50 year old crocodile wants to make friends
a strange brown creature was seen in the box of oranges
a strange animal with big ears is building a house for its friends
cheburashka with big ears likes oranges 
Пример вывода:
{ document_id = 2, relevance = 1 }
{ document_id = 3, relevance = 2 } 
Под запрос “cheburashka with big ears likes oranges” подходят два документа:
Документ “a strange brown creature was seen in the box of oranges” с id=2. Так как совпало только слово “oranges”, релевантность этого документа равна 1.
Документ “a strange animal with big ears is building a house for its friends” с id=3. Его релевантность равна 2.
А “with” — стоп-слово. Оно не участвует в поиске. Поэтому документ “a small curly guinea pig with grey hair has been found” не будет найден.
