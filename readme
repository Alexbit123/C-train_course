Задание
Переведите вычисление релевантности на формулу TF-IDF.
Будьте внимательны с повторами: теперь они важны и кратно увеличивают релевантность по соответствующему слову. Повторение слова в документе увеличивает TF. Сколько раз слово повторится в документе, столько раз нужно будет перемножить TF и IDF этого слова.
Чтобы вычислить IDF, в поисковой системе должно храниться количество документов. Для этого заведите в классе поле document_count_ типа int и по умолчанию проинициализируйте нулём при объявлении: int document_count_ = 0;.
Измените у поля relevance структуры Document тип с int на double. Теперь релевантность — вещественное число, вычисляемое по формуле TF-IDF.
Как будет тестироваться ваша программа
Тренажёр передаст вашей программе входные данные через стандартный поток ввода и сравнит результат её работы с ожидаемым.
Чтобы измерить эффективность поиска, тренажёр заменит вашу функцию main на нашу. В ней будет создан экземпляр класса SearchServer, в который добавятся десятки тысяч документов. Документы содержат от 10 до 100 слов.
При добавлении будет измеряться время поиска по базе документов. У вас в коде есть инвертированный индекс, поэтому поиск среди десятков тысяч документов не должен требовать намного больше времени, чем поиск среди сотен.
Пример входных и выходных данных
Ввод
is are was a an in the with near at
3
a colorful parrot with green wings and red tail is lost
a grey hound with black ears is found at the railway station
a white cat with long furry tail is found near the red square
white cat long tail 
Вывод
{ document_id = 2, relevance = 0.462663 }
{ document_id = 0, relevance = 0.0506831 } 
Комментарий
В C++ вещественные числа типа double отображаются с точностью до шести знаков после запятой, а не до четырёх, как мы считали в теоретической части урока.

Как и раньше, для поиска документов и вычисления их релевантности хватит двойной вложенности циклов for: внешний — по словам запроса, внутренний — по документам, где это слово встречается.
Помимо добавления количества документов, достаточно будет переделать словарь «слово → документы» в более сложную структуру map<string, map<int, double>> word_to_document_freqs_, которая сопоставляет каждому слову словарь «документ → TF». Подумайте, как с этими данными быстро вычислять IDF.
Для хранения релевантности найденных документов используйте контейнер map<int, double>. Ключи в нём — id найденных документов, а значения вычисляются по формуле TF-IDF, описанной в уроке.
