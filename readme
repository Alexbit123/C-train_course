#Задание
Переведите вычисление релевантности на формулу TF-IDF.
Будьте внимательны с повторами: теперь они важны и кратно увеличивают релевантность по соответствующему слову. Повторение слова в документе увеличивает TF. Сколько раз слово повторится в документе, столько раз нужно будет перемножить TF и IDF этого слова.
Чтобы вычислить IDF, в поисковой системе должно храниться количество документов. Для этого заведите в классе поле document_count_ типа int и по умолчанию проинициализируйте нулём при объявлении: int document_count_ = 0;.
Измените у поля relevance структуры Document тип с int на double. Теперь релевантность — вещественное число, вычисляемое по формуле TF-IDF.
Как будет тестироваться ваша программа
Тренажёр передаст вашей программе входные данные через стандартный поток ввода и сравнит результат её работы с ожидаемым.
Чтобы измерить эффективность поиска, тренажёр заменит вашу функцию main на нашу. В ней будет создан экземпляр класса SearchServer, в который добавятся десятки тысяч документов. Документы содержат от 10 до 100 слов.
При добавлении будет измеряться время поиска по базе документов. У вас в коде есть инвертированный индекс, поэтому поиск среди десятков тысяч документов не должен требовать намного больше времени, чем поиск среди сотен.
#Пример входных и выходных данных
Ввод
is are was a an in the with near at
3
a colorful parrot with green wings and red tail is lost
a grey hound with black ears is found at the railway station
a white cat with long furry tail is found near the red square
white cat long tail 
Вывод
{ document_id = 2, relevance = 0.462663 }
{ document_id = 0, relevance = 0.0506831 } 
#Требования
1. C++17 (STL)
2. MSVC(компилятор Microsoft (R) C/C++ версии 19.35.32216.1 для x86)
