Задание
Внедрите в класс SearchServer поиск по инвертированному индексу документов из теории. Для этого внесите в класс следующие изменения:
Удалите структуру DocumentContent — она вам больше не понадобится.
Замените контейнер vector<DocumentContent> на контейнер map<string, set<int>>. Ключи этого контейнера — слова из добавленных документов, а значения — id документов, в которых это слово встречается.
В методе AddDocument переберите слова документа, кроме стоп-слов. В множество документов, соответствующих очередному слову, вставьте id текущего документа.
В методе FindAllDocuments сначала вычислите релевантность документов, в которые входят плюс-слова запроса. Для этого используйте map<int, int>, где ключ — id документа, а значение — количество плюс-слов, которые в этом документе встречаются. Затем исключите из получившегося map те документы, в которых встретилось хотя бы одно минус-слово. Оставшиеся элементы map скопируйте в результирующий vector<Document>.
Возвращённый вектор документов будет отсортирован по убыванию релевантности в методе FindTopDocuments. Эта часть у вас уже реализована.
Функциональность программы в этом задании изменяться не должна.
Формат ввода и вывода
В первой строке ввода содержатся стоп-слова, разделённые пробелами. Вторая строка ввода содержит целое число N, задающее количество документов.
В каждой из последующих N строк — текст документа, в котором слова разделяются одним пробелом. Последняя строка ввода содержит текст поискового запроса, в котором слова разделяются одним пробелом.
Программа должна вывести id и релевантность пяти самых релевантных документов, отсортированных от наиболее релевантного к наименее релевантному, как это показано ниже.
Пример ввода:
is are was a an in the with near
3
a colorful parrot with green wings and red tail is lost
a grey hound with black ears is found at the railway station
a white cat with long furry tail is found near the red square
white cat long tail 
Пример вывода:
{ document_id = 2, relevance = 4 }
{ document_id = 0, relevance = 1 } 
Как будет тестироваться ваш код
Тренажёр передаст вашей программе входные данные через стандартный поток ввода и сравнит результат её работы с ожидаемым.
Чтобы измерить эффективность поиска, тренажёр заменит вашу функцию main на нашу. В ней будет создан экземпляр класса SearchServer, в который добавятся десятки тысяч документов. Документы содержат от 10 до 100 слов.
При добавлении будет измеряться время поиска по базе документов. У вас в коде есть инвертированный индекс, поэтому поиск среди десятков тысяч документов займёт не намного больше времени, чем поиск среди сотен.

ПОДСКАЗКИ 
Вместо vector<DocumentContent> documents_ объявите поле map<string, set<int>> word_to_documents_. В нём будет храниться инвертированный индекс документов. Структуру DocumentContent удалите.
В методе AddDocument переберите в цикле все слова документа, кроме стоп-слов. Вставьте в множество документов, соответствующих очередному слову документа, id вставляемого документа. Так очередной документ будет добавлен в инвертированный индекс.
В методе FindAllDocuments объявите переменную document_to_relevance типа map<int, int>. В ней ключ — id найденного документа, а значение — релевантность соответствующего документа. Она равна количеству плюс-слов, найденных в нём.
В методе FindAllDocuments переберите в цикле все плюс-слова поискового запроса. Если в word_to_documents_ есть плюс-слово, увеличьте в document_to_relevance релевантности всех документов, где это слово найдено. Так вы соберёте все документы, которые содержат плюс-слова запроса.
Исключите из результатов поиска все документы, в которых есть минус-слова. В методе FindAllDocuments переберите в цикле все минус-слова поискового запроса. Если в word_to_documents_ есть минус-слово, удалите из document_to_relevance все документы с этим минус-словом. Так в document_to_relevance останутся только подходящие документы.
Перенесите id и релевантности документов из document_to_relevance в vector<Document> и верните результирующий вектор.
