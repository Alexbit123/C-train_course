#include <iostream>
#include <set>
#include <string>
#include <vector>

using namespace std;
/*
Объявление переменной пары:
pair<T1, T2> p; // где T1 и T2 нужно заменить на нужные тип, например int и string.

Создание пары и присвоение переменной:
pair<int, int> my_pair = {13, 42};
либо через конструктор:
pair<int, int> my_pair(12, 43);

Создание пары и её запихивание в вектор пар:
vector<pair<int, string>> v;
v.push_back({10, "some text"s});

Доступ к значениям в паре, например типа pair<int, int>:
int x = my_pair.first; // к первому (левому) значению
int y = my_pair.second; // ко второму (правому) значению

Вроде это всё. Или основное, по крайней мере.
*/


string ReadLine() {
    string s;
    getline(cin, s);
    return s;
}

int ReadLineWithNumber() {
    int result = 0;
    cin >> result;
    ReadLine();
    return result;
}

vector<string> SplitIntoWords(const string& text) {
    vector<string> words;
    string word;
    for (const char c : text) {
        if (c == ' ') {
            if (!word.empty()) {
                words.push_back(word);
                word.clear();
            }
        } else {
            word += c;
        }
    }
    if (!word.empty()) {
        words.push_back(word);
    }

    return words;
}

set<string> ParseStopWords(const string& text) {
    set<string> stop_words;
    for (const string& word : SplitIntoWords(text)) {
        stop_words.insert(word);
    }
    return stop_words;
}

vector<string> SplitIntoWordsNoStop(const string& text, const set<string>& stop_words) {
    vector<string> words;
    for (const string& word : SplitIntoWords(text)) {
        if (stop_words.count(word) == 0) {
            words.push_back(word);
        }
    }
    return words;
}

//Правильное представение ADD DOCUMENT
void AddDocument(vector<pair<int, vector<string>>>& documents,
                 const set<string>& stop_words,
                 int document_id, 
                 const string& document) {
    const vector<string> words = SplitIntoWordsNoStop(document, stop_words);
    pair<int, vector<string>> doc_pair = {document_id, words};
    documents.push_back(doc_pair);   
}


set<string> ParseQuery(const string& text, const set<string>& stop_words) {
    set<string> query_words;
    for (const string& word : SplitIntoWordsNoStop(text, stop_words)) {
        query_words.insert(word);
    }
    return query_words;
}

// правильное наименование Matchdocument 
int MatchDocument(const pair<int, vector<string>>& content, 
                  const set<string>& query_words) { 
    int sch = 0;
    vector<string> words_vector = content.second;
    
    for (string word : words_vector) {
        if (query_words.count(word) != 0) {
            ++sch;
        }
    }
    return sch;   
} 



//правильное представление FindDocument 
vector<pair<int, int>> FindDocuments(const vector<pair<int, vector<string>>>& documents,
                                     const set<string>& stop_words,
                                     const string& query) {
    const set<string> query_words = ParseQuery(query, stop_words);
    vector<pair<int, int>> matched_documents;
    for (const auto& entry : documents) {
    cout << entry.first << " : "s << entry.second << endl;
    //if ()
} 
    
} 


/*
// Для каждого найденного документа возвращает его id
vector<int> FindDocuments(const vector<vector<string>>& documents, const set<string>& stop_words,
                          const string& query) {
    const set<string> query_words = ParseQuery(query, stop_words);
    vector<int> matched_documents;
    int document_id = 0;
    for (const auto& document : documents) {
        if (MatchDocument(document, query_words)) {
            matched_documents.push_back(document_id);
        }
        ++document_id;
    }
    return matched_documents;
}*/

int main() {
    const string stop_words_joined = ReadLine();
    const set<string> stop_words = ParseStopWords(stop_words_joined);

    // Read documents
    vector<vector<string>> documents;
    const int document_count = ReadLineWithNumber();
    for (int document_id = 0; document_id < document_count; ++document_id) {
        AddDocument(documents, stop_words, ReadLine());
    }

    const string query = ReadLine();
    for (auto document_id : FindDocuments(documents, stop_words, query)) {
        cout << "{ document_id = "s << document_id << " }"s << endl;
    }
}
