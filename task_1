#include <iostream>
#include <string>
#include <vector>

using namespace std;

/*
При обработке команд WORRY и HAPPY присвойте элементу вектора по индексу значение true или false.
При обработке команды COME измените размер вектора методом resize. Когда в очередь встают новые люди, они спокойны — соответствующие им элементы должны иметь значение false.
Чтобы вычислить нужный размер вектора, сложите количество пришедших людей и стоящих в очереди.
Чтобы при обработке команды LAST_WORRY узнать состояние последнего человека в очереди, воспользуйтесь методом back. Этот метод возвращает значение последнего элемента вектора.
*/

int main() {
    int q;
    cin >> q;

    // создайте вектор типа vector<bool> для хранения очереди
    
    vector<bool> query;
  
    for (int i = 0; i < q; ++i) {
        string operation_code;
        cin >> operation_code;
    
        if (operation_code == "WORRY"s) {
            int index;
            cin >> index;
            query[i] =  true;

            // Отметьте человека по индексу index как 
            // беспокоящегося (значение true).
        } else if (operation_code == "HAPPY"s) {
            int index;
            cin >> index;

            // Отметьте человека по индексу index как 
            // спокойного (значение false).
            query[i] =  false;
        } else if (operation_code == "COME"s) {
            int count;
            cin >> count;

            // Измените размер на count. Указывайте второй параметр метода
            // resize, чтобы добавлялись только спокойные (значение false).
            query.resize(query.size()+count, false);
            
            if (count > 0) {query.resize(query.size()+count, false);}
            else {query.resize(query.size()+count);}

        } else if (operation_code == "LAST_WORRY"s)  {
            // Выведите worry, если последний человек беспокойный, и happy,
            // если спокойный
            if (query.back()==1) {cout << "worry"s << endl;}
            else {cout << "happy"s << endl;}
            //cout << "last_el : "s <<query.back() << endl;
        }
    }
}
